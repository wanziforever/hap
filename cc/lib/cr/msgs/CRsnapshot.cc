/*
**      File ID:        @(#): <MID26875 () - 08/17/02, 27.1.1.1>
**
**	File:					MID26875
**	Release:				27.1.1.1
**	Date:					08/21/02
**	Time:					19:40:15
**	Newest applied delta:	08/17/02
**
** DESCRIPTION:
**	Code to create PIC files to reproduce graphical display pages
**	in documentation.
**
** OWNER:
**	Mark Todd
**
*/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "cc/cr/hdr/CRsnapShot.H"

CRsnapShot CRpic(7); /* The font size scales the layout size default is 7 */

CRsnapShot::CRsnapShot(int font)
{
	/* The size of the entire PIC display is tied by algorithm
	 * to the constant width point size "font" which is a run
	 * time variable. The point size of 7 results in a display
	 * that is the same size as the ones generated by Technical
	 * Publications.
	 */
	setFont(font);
}

void
CRsnapShot::setFont(int font)
{

	/* This function allows rescaling based on font size of PIC layouts
	 * without having to recomple the library.
	 */
	HEIGHT = .4778 * font;
	WIDTH	= .7222 * font;
	CENTER	= HEIGHT/2.0; 	/* CENTER and TOP are the same by design. */
	TOP	= HEIGHT/2.0;
	ROWS	= 26.0;
	COLS	= 80.0;
	ROW	= HEIGHT/(ROWS+1.0);
	COL	= WIDTH/(COLS+2.0);
	RAD	= .0222 * font;	/* size of screen corner arch */
	FONT	= font;
	WORKAREA= ROW * 3.0;
	BOTTOM	= -CENTER - WORKAREA;
	SIDELEN	= HEIGHT + WORKAREA - (RAD * 2.0);
	TOPLEN	= WIDTH  - (RAD * 2.0);
	irow	= 0;
	icol	= 0;
	row	= 0.0;
	col	= 0.0;
	fp	= NULL;		/* If NULL PIC generation is disabled. */
	underlined = NO;
}

void
CRsnapShot::org()
{
	if(fp == NULL) return;
	fprintf(fp,"Org: Scrn.nw\n");
}
void
CRsnapShot::setVidioAtts(Bool undl)
{
	underlined = undl;
}

void
CRsnapShot::linedown()
{
	if(fp == NULL) return;
	org();
	fprintf(fp,"line down %1.3f at %1.3f,%1.3f\n",ROW,col,row+(ROW/2.0));
}
void
CRsnapShot::lineright()
{
	if(fp == NULL) return;
	org();
	fprintf(fp,"line right %1.3f at %1.3f,%1.3f\n",COL,col-COL/2.0,row);
}
void
CRsnapShot::underline()
{
	if(fp == NULL) return;
	org();
	fprintf(fp,"line right %1.3f at %1.3f,%1.3f\n",COL,col-COL/2.0,
		row-ROW/3.0);
}
void
CRsnapShot::segleft()
{
	if(fp == NULL) return;
	org();
	fprintf(fp,"line left %1.3f at %1.3f,%1.3f\n",COL/2.0,col,row);
}
void
CRsnapShot::segright()
{
	if(fp == NULL) return;
	org();
	fprintf(fp,"line right %1.3f at %1.3f,%1.3f\n",COL/2.0,col,row);
}
void
CRsnapShot::segup()
{
	if(fp == NULL) return;
	org();
	fprintf(fp,"line up %1.3f at %1.3f,%1.3f\n",ROW/2.0,col,row);
}
void
CRsnapShot::segdown()
{
	if(fp == NULL) return;
	org();
	fprintf(fp,"line down %1.3f at %1.3f,%1.3f\n",ROW/2.0,col,row);
}
void
CRsnapShot::teeup()
{
	lineright(); segup();
}
void
CRsnapShot::teedown()
{
	lineright(); segdown();
}
void
CRsnapShot::teeright()
{
	linedown(); segright();
}
void
CRsnapShot::teeleft()
{
	linedown(); segleft();
}
void
CRsnapShot::cross()
{
	linedown(); lineright();
}
void
CRsnapShot::NWcorner()
{
	segdown(); segright();
}
void
CRsnapShot::NEcorner()
{
	segdown(); segleft();
}
void
CRsnapShot::SEcorner()
{
	segleft(); segup();
}
void
CRsnapShot::SWcorner()
{
	segright(); segup();
}

void
CRsnapShot::move_to(int r,int c)
{
	irow = r;
	icol = c;
	row = CENTER - ((r+1) * ROW);
	col = (c+1) * COL;
};

void
CRsnapShot::box(int H, int W)
{
	if(fp == NULL) return;
	float	offset_C;
	float	offset_R;
	float	height;
	float	width;
	width	= W * COL;
	height	= H * ROW;
	offset_C = width / 2.0;
	offset_R = height / 2.0 - (ROW / 2.0);
	org();
	fprintf(fp,"box ht %1.3f wid %1.3f at %1.3f,%1.3f\n",
			height,width,col+offset_C,row-offset_R);
}

void
CRsnapShot::htext(const char* T)
{
	if(fp == NULL) return;
	org();
	fprintf(fp,"\"\\fC\\s%d\\&%s\\s0\" ljust at %1.3f,%1.3f\n",
			FONT,T,col-(COL/3.0),row);
	if(underlined==YES) uline(strlen(T));
	col += COL * strlen(T);
}
void
CRsnapShot::vtext(const char* T)
{
	if(fp == NULL) return;
	int	svrow = irow;
	int	svcol = icol;
	char	t[2];
	for(int i = 0; T[i] ; i++)
	{
		sprintf(t,"%c",T[i]);
		htext(t);
		move_to(++svrow,svcol);
	}
}
void
CRsnapShot::fkeytext(const char* T)
{
	if(fp == NULL) return;
	org();
	fprintf(fp,"\"\\fC\\s%d\\&%s\\s0\" ljust at %1.3f,%1.3f\n",
			FONT,T,col+(COL/4.0),row);
	col += COL * strlen(T);
}

void
CRsnapShot::uline( int L)
{
	if(fp == NULL) return;
	float	length;
	length = L * COL;
	org();
	fprintf(fp,"line right %1.3f at %1.3f,%1.3f\n",length,
		col-COL/2.0,row-ROW/3.0);
}


void
CRsnapShot::hline( int l,GraphChar lc, GraphChar rc)
{
	if(fp == NULL) return;
	int	L = l;
	int	svcol = icol;
	float	length;
	if((lc != gACS_HLINE) &&((char)lc != 0))
	{
		L--;
		org();
		Gchar((char) lc);
	}
	if(rc != gACS_HLINE)
	{
		if((char)rc == 0)
			rc = gACS_HLINE;
		else
			L--;
	}
	if(L > 0);
	{
		length = L * COL;
		org();
		fprintf(fp,"line right %1.3f at %1.3f,%1.3f\n",
			length,col-COL/2.0,row);
		move_to(irow,icol+L);
	}
	if((rc != gACS_HLINE) && (L >= 0))
	{
		org();
		Gchar((char) rc);
	}
	move_to(irow,svcol+l);
}
void
CRsnapShot::vline( int l,GraphChar tc, GraphChar bc)
{
	if(fp == NULL) return;
	int	T = 0;
	int	B = 0;
	int	svrow = irow;
	int	svcol = icol;
	float	length;
	if((tc != gACS_VLINE) && ( (char)tc != 0))
	{
		T++;
		org();
		Gchar((char) tc);
		move_to(svrow+1,svcol);
	}
	if(((l-T) > 0)&&(bc != gACS_VLINE))
	{
		if((char)bc == 0)
			bc = gACS_VLINE;
		else B++;
	}
	if((l-(T+B)) > 0);
	{
		length = (l-(T+B)) * ROW;
		org();
		fprintf(fp,"line down %1.3f at %1.3f,%1.3f\n",
			length,col,row+(ROW/2.0));
	}
	if(B != 0)
	{
		move_to(svrow+l-1,svcol);
		org();
		Gchar((char) bc);
	}
	move_to(svrow+l,svcol);
}

void
CRsnapShot::Gchar(char gc)
{
	if(fp == NULL) return;
	switch((GraphChar) gc)
	{
		case gACS_LRCORNER:
			SEcorner(); break;
		case gACS_URCORNER:
			NEcorner(); break;
		case gACS_ULCORNER:
			NWcorner(); break;
		case gACS_LLCORNER:
			SWcorner(); break;
		case gACS_CROSSING:
			cross(); break;
		case gACS_HLINE_1:
		case gACS_HLINE_3:
		case gACS_HLINE_7:
		case gACS_HLINE:
			lineright(); break;
		case gACS_HLINE_9:
			underline(); break;
		case gACS_LTEE:
			teeright(); break;
		case gACS_RTEE:
			teeleft(); break;
		case gACS_BTEE:
			teeup(); break;
		case gACS_TTEE:
			teedown(); break;
		case gACS_VLINE:
			linedown(); break;
		default:
			return;
	}
	move_to(irow,icol+1);
}

void
CRsnapShot::beginPicture(char* pagenum)
{
	FILE *picfp =  NULL;
	char pagebuf[CRPAGEBUF_SZ];

	/* Open PIC file */
#ifdef EES
	/* view path for PIC activation file */
	if((picfp = CRpicVopen("cc/cr/display/PIC","r")) != NULL)
	{
		parsePIC(picfp);
		fclose(picfp);
	}
	else return; /* no PIC activation file so abort */
	sprintf(pagebuf,"%s/pic_%s",getenv("MYNODE"),pagenum);
#else
	if((picfp = fopen("/sn/display/PIC","r")) != NULL)
	{
		parsePIC(picfp);
		fclose (picfp);
	}
	else return; /* no PIC activation file so abort */
	sprintf(pagebuf,"/sn/display/pic_%s",pagenum);
#endif
	if((fp = fopen(pagebuf,"w")) == NULL) return;

	/* Begin PIC text */
	fprintf(fp,".DS\n.PS\n");

	/* Use symbolic invisble PIC box to locate desplay components */
	fprintf(fp,"Scrn: box invis ht %1.3f wid %1.3f\n",HEIGHT,WIDTH);
	fprintf(fp,"Org: Scrn.nw\n");

	/* Draw fram of screen */
	fprintf(fp,"arc cw from %1.3f,%1.3f to %1.3f,%1.3f rad %1.3f\n",
		 0.0,TOP-RAD, RAD,TOP, RAD);
	fprintf(fp,"Org: Scrn.nw\n");

	fprintf(fp,"arc cw from %1.3f,%1.3f to %1.3f,%1.3f rad %1.3f\n",
		 WIDTH-RAD,TOP, WIDTH,TOP-RAD, RAD);
	fprintf(fp,"Org: Scrn.nw\n");

	fprintf(fp,"arc cw from %1.3f,%1.3f to %1.3f,%1.3f rad %1.3f\n",
		 WIDTH,BOTTOM+RAD, WIDTH-RAD,BOTTOM, RAD);
	fprintf(fp,"Org: Scrn.nw\n");

	fprintf(fp,"arc cw from %1.3f,%1.3f to %1.3f,%1.3f rad %1.3f\n",
		 RAD,BOTTOM, 0.0,BOTTOM+RAD, RAD);
	fprintf(fp,"Org: Scrn.nw\n");

	fprintf(fp,"line down %1.3f at %1.3f,%1.3f\n",
		SIDELEN, 0.0,TOP-RAD);
	fprintf(fp,"Org: Scrn.nw\n");

	fprintf(fp,"line down %1.3f at %1.3f,%1.3f\n",
		SIDELEN, WIDTH,TOP-RAD);
	fprintf(fp,"Org: Scrn.nw\n");

	fprintf(fp,"line right %1.3f at %1.3f,%1.3f\n",
		TOPLEN, RAD,TOP);
	fprintf(fp,"Org: Scrn.nw\n");

	fprintf(fp,"line right %1.3f at %1.3f,%1.3f\n",
		TOPLEN, RAD,BOTTOM);
	fprintf(fp,"Org: Scrn.nw\n");

	/* Print screen prompt */
	move_to(4,0);	htext("CMD<");

	/* draw function keys */
	move_to(26,0);  box(2,8);
	move_to(26,0);	fkeytext("TEXT/");
	move_to(27,0);	fkeytext("GRAPHICS");

	move_to(26,9);  box(2,8);
	move_to(26,9);	fkeytext("REDRAW");

	move_to(26,18); box(2,8);
	move_to(26,18); fkeytext("CMD/MSG");

	move_to(26,31); box(2,8);
	move_to(26,31); fkeytext("ALM/RLS");

	move_to(26,40); box(2,8);
	move_to(26,43); fkeytext("F5");

	move_to(26,54); box(2,8);
	move_to(26,57); fkeytext("F6");

	move_to(26,63); box(2,8);
	move_to(26,66); fkeytext("F7");


	move_to(26,72); box(2,8);
	move_to(26,75); fkeytext("F8");

	/* Put in screen divider lines */
	move_to(2,0);	uline(80);
	move_to(21,0);	uline(80);
}

void
CRsnapShot::closePicture()
{
	if(fp == NULL) return;
	fprintf(fp,".PE\n.DE\n");
	fclose(fp);
	fp	= NULL;
}

void
CRsnapShot::parsePIC(FILE *picfp)
{
	const	int bufsz = 128;
	char	buf [ bufsz ];
	int	font = 7;
	if(picfp != NULL)
	{
		while(fgets(buf,bufsz, picfp))
		{
			char *command, *value;
			if((command = strtok(buf," =\t\n")) != NULL)
			{
				value = strtok(NULL," \t\n");
				if(strcmp(command,"font")==0)
				{
					if(value != NULL)
					{
						font = atoi(value);
						if((font >= 4)&&(font <= 14))
							setFont(font);
					}
				}
			}
		}
	}
}

FILE* CRpicVopen(const char* fileName, const char* type)
{
	FILE *fp = NULL;
	char *envVpath, *vpath, *node, *colon;
	int	fileLength = strlen(fileName);
	if((envVpath = getenv("VPATH")) != NULL)
	{
		vpath = new char [ strlen(envVpath)+1 ];
		strcpy(vpath,envVpath);
		for(node = vpath; node ; node = colon)
		{
			if((colon = strchr(node,':')) != NULL)
				*colon++ = '\0';
			char* filePath =
				new char [ strlen(node)+fileLength+1 ];
			sprintf(filePath,"%s/%s",node,fileName);
			fp = fopen(filePath,type);
			delete filePath;
			if(fp != NULL) break; 
		}
		delete vpath;
	}
	return fp;
}
